name: .NET and Go Build

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build and Publish BlazorApp1
      run: |
        cd BlazorApp1
        dotnet publish -c Release -o ./publish
        cd ..
    
    - name: Process BlazorApp1 Output
      run: |
        rm -rf ./cmd/httpserver/static/app1/wwwroot
        cp -r ./BlazorApp1/publish/wwwroot ./cmd/httpserver/static/app1/wwwroot
        mv ./cmd/httpserver/static/app1/wwwroot/index.html ./cmd/httpserver/static/app1/wwwroot/index_template.html
        sed -i 's#<base href="/" />#<base href="/app1/" />#' ./cmd/httpserver/static/app1/wwwroot/index_template.html
    
    - name: Build and Publish BlazorApp2
      run: |
        cd BlazorApp2
        dotnet publish -c Release -o ./publish
        cd ..
    
    - name: Process BlazorApp2 Output
      run: |
        rm -rf ./cmd/httpserver/static/app2/wwwroot
        cp -r ./BlazorApp2/publish/wwwroot ./cmd/httpserver/static/app2/wwwroot
        mv ./cmd/httpserver/static/app2/wwwroot/index.html ./cmd/httpserver/static/app2/wwwroot/index_template.html
        sed -i 's#<base href="/" />#<base href="/app2/" />#' ./cmd/httpserver/static/app2/wwwroot/index_template.html
    
    - name: Build Go Server
      run: |
        cd ./cmd/httpserver/
        go build .
        cd ../..
    
    - name: Test
      run: dotnet test --no-build --verbosity normal
    
    - name: Upload Static Files
      uses: actions/upload-artifact@v3
      with:
        name: static-files
        path: ./cmd/httpserver/static
        if-no-files-found: error
    
    - name: Create Release
      if: github.ref == 'refs/heads/main' # Only run this step when on the main branch
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the latest tag
        git fetch --tags
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        
        # Increment the patch version
        IFS='.' read -ra ADDR <<< "${latest_tag#v}"
        new_tag="v$((ADDR[0])).$((ADDR[1])).$((ADDR[2] + 1))"
        
        echo "Creating new release: $new_tag"
        
        # Create a new tag
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag $new_tag
        
        # Create a release using the existing artifact
        gh release create $new_tag \
          --title "Release $new_tag" \
          --notes "Automated release for commit ${{ github.sha }}" \
          --repo ${{ github.repository }} \
          "${{ steps.upload-artifact.outputs.artifact-path }}#static-files"
        
        echo "Release $new_tag created successfully"
